version()
version
library(igraph)
install.packages("igraph")
install.packages("igraph")
library(igraph)
rep(1:5, times = 2)
sequence(10, 20, 2)
seq(10, 20, 2)
seq(10, 20, 2) + seq(20, 30, 2)
factor(1,2,3,4,5,2,3,5)
factor(c(1, 2, 3, 4, 5, 2, 3, 5))
f <- factor(c(1, 2, 3, 4, 5, 2, 3, 5)) levels(f)
plot(x = 1:5, y = rep(5, 5), pch = 19, cex = 12, col = rgb(.25, .5, .3, alpha = .5), xlim = c(0, 6))
ls()
rm(list = ls())
ls()
library(igraph)
g1 <- graph(edges = c(1, 2, 2, 3, 3, 1), n = 3, directed = F)
plot(g1)
install.packages("igraph")
if (!require(devtools)) {     install.packages('devtools') }
devtools::install_github('hadley/ggplot2')
write("TMP = 'C:\Temp'", file = file.path(Sys.getenv('R_USER'), '.Renviron'))
write("TMP = 'C:\\Temp'", file = file.path(Sys.getenv('R_USER'), '.Renviron'))
q q
q
q()
devtools::install_github('hadley/ggplot2')
if (!require(devtools)) {     install.packages('devtools') }
devtools::install_github('hadley/ggplot2')
devtools::install_github('thomasp85/ggforce')
install.packages("ggplot2")
install.packages("ggforce")
install.packages("ggraph")
devtools::install_github('hadley/ggplot2')
install.packages("stringr", dep = TRUE)
devtools::install_github('hadley/ggplot2')
install.packages("scales", dep = TRUE)
devtools::install_github('hadley/ggplot2')
devtools::install_github('hadley/scales')
devtools::install_github('hadley/scales')devtools::install_github('hadley/scales')
require(devtools)
devtools::install_github('hadley/scales')
devtools::install_github('hadley/scales')
devtools::install_github('hadley/ggplot2')
if (!require(assertthat)) {     install.packages('assertthat') }
if (!require(assertthat)) {     install.packages('assertthat') }
devtools::install_github('hadley/ggplot2')
devtools::install_github('thomasp85/ggforce')
if (!require(DBI)) {     install.packages('DBI') }
if (!require(DBI)) {     install.packages('DBI') } devtools::install_github('thomasp85/ggforce')
devtools::install_github('thomasp85/units')
devtools::install_github('hadley/units')
devtools::install_github('edzer/units')
install.packages('udunits2')
devtools::install_github('pacificclimate/Rudunits2')
devtools::install_github('edzer/units')
devtools::install_github('thomasp85/ggforce')
#write("TMP = 'C:\\Temp'", file = file.path(Sys.getenv('R_USER'), '.Renviron'))
devtools::install_github('thomasp85/ggraph')
irisDen <- as.dendrogram(hclust(dist(iris[1:4], method = 'euclidean'),                                 method = 'ward.D2')) ## Add the species information to the leafs irisDen <- dendrapply(irisDen, function(d) {     if (is.leaf(d))         attr(d, 'nodePar') <- list(species = iris[as.integer(attr(d, 'label')), 5])     d }) # Plotting this looks very much like ggplot2 except for the new geoms ggraph(graph = irisDen, layout = 'dendrogram', repel = TRUE, circular = TRUE,        ratio = 0.5) +     geom_edge_elbow() +     geom_node_text(aes(x = x * 1.05, y = y * 1.05, filter = leaf,                        angle = nAngle(x, y), label = label),                    size = 3, hjust = 'outward') +     geom_node_point(aes(filter = leaf, color = species)) +     coord_fixed() +     ggforce::theme_no_axes()
library(ggraph)
 irisDen <- as.dendrogram(hclust(dist(iris[1:4], method = 'euclidean'),                                 method = 'ward.D2')) ## Add the species information to the leafs irisDen <- dendrapply(irisDen, function(d) {     if (is.leaf(d))         attr(d, 'nodePar') <- list(species = iris[as.integer(attr(d, 'label')), 5])     d }) # Plotting this looks very much like ggplot2 except for the new geoms ggraph(graph = irisDen, layout = 'dendrogram', repel = TRUE, circular = TRUE,        ratio = 0.5) +     geom_edge_elbow() +     geom_node_text(aes(x = x * 1.05, y = y * 1.05, filter = leaf,                        angle = nAngle(x, y), label = label),                    size = 3, hjust = 'outward') +     geom_node_point(aes(filter = leaf, color = species)) +     coord_fixed() +     ggforce::theme_no_axes()
friendGraph <- graph_from_data_frame(highschool) V(friendGraph)$degree <- degree(friendGraph, mode = 'in') graph1957 <- subgraph.edges(friendGraph, which(E(friendGraph)$year == 1957), F) graph1958 <- subgraph.edges(friendGraph, which(E(friendGraph)$year == 1958), F) V(friendGraph)$pop.increase <- degree(graph1958, mode = 'in') >   degree(graph1957, mode = 'in') ggraph(friendGraph, 'igraph', algorithm = 'kk') +   geom_edge_fan(aes(alpha = ..index..)) +   geom_node_point(aes(size = degree, colour = pop.increase)) +   scale_edge_alpha('Friends with', guide = 'edge_direction') +   scale_colour_manual('Improved', values = c('firebrick', 'forestgreen')) +   scale_size('# Friends') +   facet_wrap( ~ year) +   ggforce::theme_no_axes()
friendGraph <- graph_from_data_frame(highschool) V(friendGraph)$degree <- degree(friendGraph, mode = 'in') graph1957 <- subgraph.edges(friendGraph, which(E(friendGraph)$year == 1957), F) graph1958 <- subgraph.edges(friendGraph, which(E(friendGraph)$year == 1958), F) V(friendGraph)$pop.increase <- degree(graph1958, mode = 'in') >   degree(graph1957, mode = 'in') ggraph(friendGraph, 'igraph', algorithm = 'kk') +   geom_edge_fan(aes(alpha = ..index..)) +   geom_node_point(aes(size = degree, colour = pop.increase)) +   scale_edge_alpha('Friends with', guide = 'edge_direction') +   scale_colour_manual('Improved', values = c('firebrick', 'forestgreen')) +   scale_size('# Friends') +   facet_wrap( ~ year) +   ggforce::theme_no_axes()
library(igraph)
friendGraph <- graph_from_data_frame(highschool)
V(friendGraph)$degree <- degree(friendGraph, mode = 'in')
graph1957 <- subgraph.edges(friendGraph, which(E(friendGraph)$year == 1957), F) graph1958 <- subgraph.edges(friendGraph, which(E(friendGraph)$year == 1958), F) V(friendGraph)$pop.increase <- degree(graph1958, mode = 'in') >   degree(graph1957, mode = 'in')
ggraph(friendGraph, 'igraph', algorithm = 'kk') +   geom_edge_fan(aes(alpha = ..index..)) +   geom_node_point(aes(size = degree, colour = pop.increase)) +   scale_edge_alpha('Friends with', guide = 'edge_direction') +   scale_colour_manual('Improved', values = c('firebrick', 'forestgreen')) +   scale_size('# Friends') +   facet_wrap( ~ year) +   ggforce::theme_no_axes()
highschool
library(igraph) library(ggraph)
rm(list = ls())
install.packages('rodbc')
install.packages('RODBC')
rm(list = ls()) library(igraph) library(ggraph) library(RODBC)
dbhandle <- odbcDriverConnect('driver={SQL Server};server=localhost;database=Work_770_2555_va;trusted_connection=true')
res <- sqlQuery(dbhandle, 'select * from Node')
res
res
dbhandle <- odbcDriverConnect('driver={SQL Server};server=ARTEMCHUKPC\MSSQL2016;Integrated Security=True;database=Work_770_2555_va')
dbhandle <- odbcDriverConnect('driver={SQL Server};server=ARTEMCHUKPC\\MSSQL2016;Integrated Security=True;database=Work_770_2555_va')
res <- sqlQuery(dbhandle, 'select * from Node')
res
View(res)
nodes.info <- sqlQuery(dbhandle, 'select * from Node_Info')
?read_graph
xlist <- read.table(nodes.dependencies)
read.table(nodes.dependencies)
dbhandle <- odbcDriverConnect('driver={SQL Server};server=ARTEMCHUKPC\\MSSQL2016;Integrated Security=True;database=Work_770_2555_va') nodes.dependencies <- sqlQuery(dbhandle, 'select * from Node') nodes.info <- sqlQuery(dbhandle, 'select * from Node_Info')
rm(list = ls())
library(igraph)
library(ggraph)
library(RODBC)
dbhandle <- odbcDriverConnect('driver={SQL Server};server=ARTEMCHUKPC\\MSSQL2016;Integrated Security=True;database=Work_770_2555_va')
nodes.dependencies <- sqlQuery(dbhandle, 'select * from Node')
nodes.info <- sqlQuery(dbhandle, 'select * from Node_Info')
read.table(nodes.dependencies)
xlist <- graph.data.frame(xlist)
xlist <- graph.data.frame(nodes.dependencies)
plot(xlist)
#https://github.com/thomasp85/ggraph rm(list = ls()) library(igraph) library(ggraph) library(RODBC) dbhandle <- odbcDriverConnect('driver={SQL Server};server=ARTEMCHUKPC\\MSSQL2016;Integrated Security=True;database=Work_770_2555_va') nodes.dependencies <- sqlQuery(dbhandle, 'select * from Node') nodes.info <- sqlQuery(dbhandle, 'select * from Node_Info') xlist <- graph.data.frame(nodes.dependencies) xlist
summary(xlist)
cluster_fast_greedy(graph, merges = TRUE, modularity = TRUE, membership = TRUE)
rm(list = ls())
library(igraph)
library(ggraph)
library(RODBC)
dbhandle <- odbcDriverConnect('driver={SQL Server};server=ARTEMCHUKPC\\MSSQL2016;Integrated Security=True;database=Work_770_2555_va')
nodes.dependencies <- sqlQuery(dbhandle, 'select * from Node')
nodes.info <- sqlQuery(dbhandle, 'select * from Node_Info')
graph <- graph.data.frame(nodes.dependencies)
summary(graph)
cluster_fast_greedy(graph, merges = TRUE, modularity = TRUE, membership = TRUE)
cluster_edge_betweenness(graph, directed = TRUE, edge.betweenness = TRUE, merges = TRUE, bridges = TRUE,  modularity = TRUE, membership = TRUE)
rm(list = ls())
library(igraph)
library(ggraph)
library(RODBC)
dbhandle <- odbcDriverConnect('driver={SQL Server};server=ARTEMCHUKPC\\MSSQL2016;Integrated Security=True;database=Work_770_2555_va')
nodes.dependencies <- sqlQuery(dbhandle, 'select * from Node')
nodes.info <- sqlQuery(dbhandle, 'select * from Node_Info')
graph <- graph.data.frame(nodes.dependencies)
summary(graph)
com <- cluster_louvain(graph)
undirected <- as.undirected(graph, mode = "collapse")
com <- cluster_fast_greedy(graph, merges = TRUE, modularity = TRUE, membership = TRUE)
com <- cluster_fast_greedy(undirected, merges = TRUE, modularity = TRUE, membership = TRUE)
ue <- as.undirected(graph, mode = "each")
com <- cluster_fast_greedy(ue, merges = TRUE, modularity = TRUE, membership = TRUE)
uc.simplify()
ue.simplify()
is.simple(uc)
rm(list = ls())
library(igraph)
library(ggraph)
library(RODBC)
dbhandle <- odbcDriverConnect('driver={SQL Server};server=ARTEMCHUKPC\\MSSQL2016;Integrated Security=True;database=Work_770_2555_va')
nodes.dependencies <- sqlQuery(dbhandle, 'select * from Node')
nodes.info <- sqlQuery(dbhandle, 'select * from Node_Info')
graph <- graph.data.frame(nodes.dependencies)
summary(graph)
uc <- as.undirected(graph, mode = "collapse")
ue <- as.undirected(graph, mode = "each")
is.simple(uc)
simplify(uc, remove.multiple = TRUE, remove.loops = TRUE, edge.attr.comb = igraph_opt("edge.attr.comb"))
is.simple(uc)
simplify(uc, remove.multiple = TRUE, remove.loops = TRUE, edge.attr.comb = igraph_opt("edge.attr.comb"))
is.simple(uc)
uc <- simplify(uc, remove.multiple = TRUE, remove.loops = TRUE, edge.attr.comb = igraph_opt("edge.attr.comb"))
is.simple(uc)
com <- cluster_fast_greedy(uc, merges = TRUE, modularity = TRUE, membership = TRUE)
